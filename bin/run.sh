#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# Function to wait for database to be ready
wait_for_db() {
    log "Waiting for database to be ready..."
    
    # For now, use the simple approach since we know the database is accessible
    # We can enhance the parsing later if needed
    DB_HOST=db
    DB_PORT=5432
    DB_USER=myuser
    DB_PASS=mypassword
    DB_NAME=mydatabase
    
    log "Database connection details:"
    log "  Host: $DB_HOST"
    log "  Port: $DB_PORT"
    log "  User: $DB_USER"
    log "  Database: $DB_NAME"
    
    # Wait for database to be accessible
    until PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c '\q' >/dev/null 2>&1; do
        log "Database is not ready yet. Waiting..."
        sleep 5
    done
    
    log_success "Database is ready!"
}

# Function to create database tables
create_tables() {
    log "Creating database tables..."
    
    if python src/create_tables.py; then
        log_success "Database tables created successfully"
    else
        log_error "Failed to create database tables"
        return 1
    fi
}

# Function to run the pipeline
run_pipeline() {
    local categories=${PIPELINE_CATEGORIES:-"Baseball,Hockey,Basketball,Football"}
    local concurrency=${PIPELINE_MAX_CONCURRENCY:-3}
    local delay=${PIPELINE_DELAY:-1.0}
    
    log "Starting pipeline execution..."
    log "  Categories: $categories"
    log "  Concurrency: $concurrency"
    log "  Delay: ${delay}s"
    
    # Convert comma-separated categories to space-separated for CLI
    local categories_array=$(echo "$categories" | tr ',' ' ')
    
    if python -m scraper.pipeline --categories $categories_array --concurrency "$concurrency" --delay "$delay"; then
        log_success "Pipeline execution completed successfully"
        return 0
    else
        log_error "Pipeline execution failed"
        return 1
    fi
}

# Function to start the scheduler
start_scheduler() {
    local schedule=${PIPELINE_SCHEDULE:-"0 2 * * 0"}  # Default: Sundays at 2 AM
    local timezone=${PIPELINE_TIMEZONE:-UTC}
    
    log "Starting scheduler..."
    log "  Schedule: $schedule"
    log "  Timezone: $timezone"
    
    # Create cron file
    cat > /app/bin/cron.txt << EOF
# Generated by run.sh
# Schedule: $schedule
# Timezone: $timezone
$schedule cd /app && /app/bin/run_pipeline.sh >> /app/logs/cron.log 2>&1
EOF
    
    log "Cron file created:"
    cat /app/bin/cron.txt
    
    # Start supercronic
    log "Starting supercronic with cron file..."
    exec supercronic /app/bin/cron.txt
}

# Main execution
main() {
    log "=== TAG Grading Scraper Container Starting ==="
    
    # Set log level
    if [[ -n "$LOG_LEVEL" ]]; then
        export PYTHONPATH="/app/src:$PYTHONPATH"
        # Set Python logging level
        case "$LOG_LEVEL" in
            DEBUG) export PYTHONUNBUFFERED=1 ;;
            INFO) export PYTHONUNBUFFERED=1 ;;
            WARNING) export PYTHONUNBUFFERED=1 ;;
            ERROR) export PYTHONUNBUFFERED=1 ;;
        esac
    fi
    
    # Wait for database
    wait_for_db
    
    # Create tables
    create_tables
    
    # Run pipeline once on startup
    log "=== Running initial pipeline execution ==="
    if run_pipeline; then
        log_success "Initial pipeline execution completed"
    else
        log_error "Initial pipeline execution failed"
        exit 1
    fi
    
    # Check if scheduling is enabled
    if [[ -n "$PIPELINE_SCHEDULE" && "$PIPELINE_SCHEDULE" != "disabled" ]]; then
        log "=== Starting scheduled pipeline execution ==="
        start_scheduler
    else
        log_warning "Pipeline scheduling is disabled. Container will exit after initial run."
        log "To enable scheduling, set PIPELINE_SCHEDULE environment variable"
        log "Example: PIPELINE_SCHEDULE='0 2 * * 0' for weekly runs on Sundays at 2 AM"
    fi
}

# Handle signals gracefully
trap 'log "Received signal, shutting down gracefully..."; exit 0' SIGTERM SIGINT

# Run main function
main "$@"
