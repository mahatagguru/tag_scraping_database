name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch any issues
    - cron: '0 2 * * *'

# Environment variables
env:
  PYTHON_VERSION: '3.9'

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [black, isort, flake8, mypy, pylint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt || true
        
    - name: Run ${{ matrix.tool }}
      run: |
        case "${{ matrix.tool }}" in
          "black")
            black --check --diff src/ --line-length 88
            ;;
          "isort")
            isort --check-only --diff src/
            ;;
          "flake8")
            flake8 src/
            ;;
          "mypy")
            mypy src/ --ignore-missing-imports --no-strict-optional --disable-error-code=no-untyped-def --disable-error-code=no-any-return --disable-error-code=unreachable --disable-error-code=var-annotated --disable-error-code=assignment --disable-error-code=operator --disable-error-code=attr-defined --disable-error-code=return-value --disable-error-code=func-returns-value --disable-error-code=unused-ignore
            ;;
          "pylint")
            pylint src/ --disable=C0114,C0115,C0116,W1203,W0611,W0718,C0413,C0415,R0801,R0917,R0902,R1702,R1705,R1710,R1722,W0401,W0613,W0603,W0612,C0103,C0411,C0412,W0404,W0621 --max-line-length=88
            ;;
        esac

  # Unit tests with SQLite
  test-sqlite:
    name: Test with SQLite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        include:
          - python-version: '3.9'
            test-name: 'SQLite Tests'
          - python-version: '3.10'
            test-name: 'SQLite Tests'
          - python-version: '3.11'
            test-name: 'SQLite Tests'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Run tests with SQLite
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: sqlite
        name: sqlite-coverage

  # Unit tests with PostgreSQL
  test-postgresql:
    name: Test with PostgreSQL
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install PostgreSQL dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock psycopg2-binary
        
    - name: Set up test environment
      run: |
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
        
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Run tests with PostgreSQL
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: postgresql
        name: postgresql-coverage

  # Database schema validation
  validate-schema:
    name: Validate Database Schema
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Validate schema with SQLite
      run: |
        cd src
        python validate_schema.py
        
    - name: Test PostgreSQL detection
      run: |
        python -m pytest tests/test_postgresql_detection.py -v

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [safety, bandit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run ${{ matrix.tool }} security check
      run: |
        case "${{ matrix.tool }}" in
          "safety")
            safety check --json --output safety-report.json || true
            ;;
          "bandit")
            bandit -r src/ -f json -o bandit-report.json || true
            ;;
        esac
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Build and package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test-sqlite, test-postgresql, validate-schema]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-package
        path: dist/

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint, test-sqlite, test-postgresql, validate-schema, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Quality Gate Summary
      run: |
        echo "## ðŸŽ¯ Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… All checks completed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Linting**: Code formatting and style checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Testing**: Unit tests passed with both SQLite and PostgreSQL" >> $GITHUB_STEP_SUMMARY
        echo "- **Schema Validation**: Database schema validation passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: Security checks completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸš€ Ready for deployment!" >> $GITHUB_STEP_SUMMARY
