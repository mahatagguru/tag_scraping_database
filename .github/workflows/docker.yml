name: Docker Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: mahatagguru/tag-scraping-tool

jobs:
  # Build and test Docker image
  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Check Docker Hub credentials
      id: check-credentials
      run: |
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          echo "has_credentials=true" >> $GITHUB_OUTPUT
        else
          echo "has_credentials=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && steps.check-credentials.outputs.has_credentials == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Skip Docker push (no credentials)
      if: github.event_name != 'pull_request' && steps.check-credentials.outputs.has_credentials == 'false'
      run: |
        echo "‚ö†Ô∏è No Docker Hub credentials found. Skipping image push."
        echo "Please set DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets to enable Docker Hub integration."
        echo "See DOCKER_HUB_SETUP.md for setup instructions."
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
          
    - name: Build Docker image (simple)
      id: build
      run: |
        echo "Building Docker image with simple command..."
        docker build -t tag-scraping-tool:local .
        echo "Build completed, checking result..."
        docker images | grep tag-scraping-tool || echo "No tag-scraping-tool images found"
        
    - name: List all images
      run: |
        echo "=== All Docker images ==="
        docker images
        echo ""
        echo "=== Looking for our image ==="
        docker images | grep tag-scraping-tool || echo "No tag-scraping-tool images found"
        echo ""
        echo "=== Image details ==="
        docker inspect tag-scraping-tool:local || echo "Image inspection failed"
        
    - name: Test Docker image
      run: |
        # Test the locally built image (always available)
        echo "Testing locally built image..."
        docker run --rm tag-scraping-tool:local python -c "print('Docker image test successful')"
        
    - name: Build and push to registry (if credentials available)
      if: github.event_name != 'pull_request' && steps.check-credentials.outputs.has_credentials == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Upload Docker image as artifact
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          .dockerignore
          Dockerfile

  # Security scan Docker image
  security-scan:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        args: --severity-threshold=high

  # Deploy Docker image to environments
  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "üöÄ Deploying Docker image to staging environment..."
        # Add your staging deployment logic here
        # Examples:
        # - kubectl apply -f k8s/staging/
        # - docker-compose -f docker-compose.staging.yml up -d
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Deploying Docker image to production environment..."
        # Add your production deployment logic here
        # Examples:
        # - kubectl apply -f k8s/production/
        # - docker-compose -f docker-compose.production.yml up -d
        
    - name: Verify deployment
      run: |
        echo "‚úÖ Docker deployment completed successfully"
        # Add verification logic here
