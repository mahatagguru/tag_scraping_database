name: Docker Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker image
  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v6
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Test the built image
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "print('Docker image test successful')"
        
    - name: Upload Docker image as artifact
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          .dockerignore
          Dockerfile

  # Security scan Docker image
  security-scan:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        args: --severity-threshold=high

  # Deploy Docker image to environments
  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "ðŸš€ Deploying Docker image to staging environment..."
        # Add your staging deployment logic here
        # Examples:
        # - kubectl apply -f k8s/staging/
        # - docker-compose -f docker-compose.staging.yml up -d
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Deploying Docker image to production environment..."
        # Add your production deployment logic here
        # Examples:
        # - kubectl apply -f k8s/production/
        # - docker-compose -f docker-compose.production.yml up -d
        
    - name: Verify deployment
      run: |
        echo "âœ… Docker deployment completed successfully"
        # Add verification logic here
